#include "header/model/hvdc_model/hvdc_model_test.h"
#include "header/basic/utility.h"
#include "header/steps_namespace.h"

#include "header/model/hvdc_model/CDC4T.h"

using namespace std;
HVDC_MODEL_TEST::HVDC_MODEL_TEST()
{
    ;
}



void HVDC_MODEL_TEST::setup()
{
    db = new POWER_SYSTEM_DATABASE;
    db->set_allowed_max_bus_number(100);
    db->set_system_base_frequency_in_Hz(50.0);
    db->set_system_base_power_in_MVA(100.0);

    BUS bus(db);
    bus.set_bus_number(1);
    bus.set_bus_name("RECBUS");
    bus.set_bus_type(PQ_TYPE);
    bus.set_base_voltage_in_kV(345.0);
    bus.set_voltage_in_pu(1.0);
    bus.set_angle_in_rad(0.0);

    db->append_bus(bus);

    bus.set_bus_number(2);
    bus.set_bus_name("INVBUS");
    bus.set_bus_type(PQ_TYPE);
    bus.set_base_voltage_in_kV(525.0);
    bus.set_voltage_in_pu(1.0);
    bus.set_angle_in_rad(0.0);

    db->append_bus(bus);

    HVDC hvdc(db);
    hvdc.set_converter_bus(RECTIFIER, 1);
    hvdc.set_converter_bus(INVERTER, 2);
    hvdc.set_identifier("DC");
    hvdc.set_name("Yin-Dong HVDC");
    hvdc.set_status(true);
    hvdc.set_converter_operation_mode(RECTIFIER, RECTIFIER_CONSTANT_POWER);
    hvdc.set_converter_operation_mode(INVERTER, INVERTER_CONSTANT_VOLTAGE);
    hvdc.set_nominal_dc_power_per_pole_in_MW(2000.0);
    hvdc.set_nominal_dc_voltage_per_pole_in_kV(660.0);
    hvdc.set_hvdc_line_resistance_in_ohm(9.5);
    hvdc.set_compensating_resistance_to_hold_dc_voltage_in_ohm(0.0);
    hvdc.set_current_power_margin(0.1);
    hvdc.set_threshold_dc_voltage_for_constant_power_and_constant_current_mode_in_kV(500.0);

    hvdc.set_converter_max_alpha_or_gamma_in_deg(RECTIFIER, 90.0);
    hvdc.set_converter_min_alpha_or_gamma_in_deg(RECTIFIER, 5.0);
    hvdc.set_converter_number_of_bridge(RECTIFIER, 2);
    hvdc.set_converter_transformer_grid_side_base_voltage_in_kV(RECTIFIER, 345.0);
    hvdc.set_converter_transformer_converter_side_base_voltage_in_kV(RECTIFIER, 250.0);
    hvdc.set_converter_transformer_impedance_in_ohm(RECTIFIER, complex<double>(0.1, 9.153));
    hvdc.set_converter_transformer_max_tap_in_pu(RECTIFIER, 1.3);
    hvdc.set_converter_transformer_min_tap_in_pu(RECTIFIER, 0.7);
    hvdc.set_converter_transformer_number_of_taps(RECTIFIER, 25);

    hvdc.set_converter_max_alpha_or_gamma_in_deg(INVERTER, 90.0);
    hvdc.set_converter_min_alpha_or_gamma_in_deg(INVERTER, 8.0);
    hvdc.set_converter_number_of_bridge(INVERTER, 2);
    hvdc.set_converter_transformer_grid_side_base_voltage_in_kV(INVERTER, 525.0);
    hvdc.set_converter_transformer_converter_side_base_voltage_in_kV(INVERTER, 250.0);
    hvdc.set_converter_transformer_impedance_in_ohm(INVERTER, complex<double>(0.1, 9.885));
    hvdc.set_converter_transformer_max_tap_in_pu(INVERTER, 1.3);
    hvdc.set_converter_transformer_min_tap_in_pu(INVERTER, 0.7);
    hvdc.set_converter_transformer_number_of_taps(INVERTER, 25);

    db->append_hvdc(hvdc);

    DEVICE_ID did;
    did.set_device_type("HVDC");
    TERMINAL terminal;
    terminal.append_bus(1);
    terminal.append_bus(2);
    did.set_device_terminal(terminal);
    did.set_device_identifier("DC");

    hvdcptr = db->get_hvdc(did);
    hvdcptr->solve_steay_state();
}

void HVDC_MODEL_TEST::tear_down()
{
    delete db;

    show_test_end_information();
}

HVDC* HVDC_MODEL_TEST::get_hvdc()
{
    return hvdcptr;
}


void HVDC_MODEL_TEST::run_ramp_response_of_hvdc_model(HVDC_MODEL* model)
{
    ostringstream os;

    cout<<"Model:"<<model->get_standard_model_string()<<endl;

    double delt = 0.001;
    set_dynamic_simulation_time_step_in_s(delt);

    HVDC* hvdcptr = get_hvdc();

    BUS* bus = db->get_bus(1);

    HVDC_MODEL* model = hvdcptr->get_hvdc_model();
    model->initialize();

    double time = -delt*2.0;
    double volt_rec, volt_inv;
    double p_rec, q_rec, alpha, mu_rec, p_inv, q_inv, gamma, mu_inv;
    double vdcr, vdci, idcr, idci;

    volt_rec = db->get_bus_voltage_in_pu(1);
    volt_inv = db->get_bus_voltage_in_pu(2);

    HVDC_CONVERTER_SIDE converter;

    converter = RECTIFIER;
    p_rec = model->get_converter_ac_complex_power_in_MVA(converter).real();
    q_rec = model->get_converter_ac_complex_power_in_MVA(converter).imag();
    alpha = model->get_converter_alpha_or_gamma_in_deg(converter);
    mu_rec = model->get_converter_commutation_overlap_angle_in_deg(converter);
    vdcr = model->get_converter_dc_voltage_in_kV(converter);
    idcr = model->get_converter_dc_current_in_kA(converter);

    converter = INVERTER;
    p_inv = model->get_converter_ac_complex_power_in_MVA(converter).real();
    q_inv = model->get_converter_ac_complex_power_in_MVA(converter).imag();
    gamma = model->get_converter_alpha_or_gamma_in_deg(converter);
    mu_inv = model->get_converter_commutation_overlap_angle_in_deg(converter);
    vdci = model->get_converter_dc_voltage_in_kV(converter);
    idci = model->get_converter_dc_current_in_kA(converter);


    os<<"TIME\tVOLT_REC\tVOLT_INV\tP_REC\tQ_REC\tALPHA\tMU_REC\tP_INV\tQ_INV\tGAMMA\tMU_INV\tVDCR\tVDCI\tIDCR\tIDCR"<<endl;
    cos<<os.str();
    os.clear();
    os<<setprecision(3)<<time<<"\t"
      <<setprecision(6)<<volt_rec<<"\t"
      <<setprecision(6)<<volt_inv<<"\t"
      <<setprecision(6)<<p_rec<<"\t"
      <<setprecision(6)<<q_rec<<"\t"
      <<setprecision(6)<<alpha<<"\t"
      <<setprecision(6)<<mu_rec<<"\t"
      <<setprecision(6)<<p_inv<<"\t"
      <<setprecision(6)<<q_inv<<"\t"
      <<setprecision(6)<<gamma<<"\t"
      <<setprecision(6)<<mu_inv<<"\t"
      <<setprecision(6)<<vdcr<<"\t"
      <<setprecision(6)<<vdci<<"\t"
      <<setprecision(6)<<idcr<<"\t"
      <<setprecision(6)<<idci<<endl;
    cos<<os.str();
    os.clear();
    while(true)
    {
        time += delt;
        if(time>1.0+FLOAT_EPSILON)
        {
            time -=delt;
            break;
        }

        converter = RECTIFIER;
        vdcr = model->get_converter_dc_voltage_in_kV(converter);
        while(true)
        {
            model->run(INTEGRATE_MODE);
            if(fabs(vdcr-model->get_converter_dc_voltage_in_kV(RECTIFIER))>1e-6)
                vdcr = model->get_converter_dc_voltage_in_kV(RECTIFIER);
            else
                break;
        }
        model->run(UPDATE_MODE);

        converter = RECTIFIER;
        p_rec = model->get_converter_ac_complex_power_in_MVA(converter).real();
        q_rec = model->get_converter_ac_complex_power_in_MVA(converter).imag();
        alpha = model->get_converter_alpha_or_gamma_in_deg(converter);
        mu_rec = model->get_converter_commutation_overlap_angle_in_deg(converter);
        vdcr = model->get_converter_dc_voltage_in_kV(converter);
        idcr = model->get_converter_dc_current_in_kA(converter);

        converter = INVERTER;
        p_inv = model->get_converter_ac_complex_power_in_MVA(converter).real();
        q_inv = model->get_converter_ac_complex_power_in_MVA(converter).imag();
        gamma = model->get_converter_alpha_or_gamma_in_deg(converter);
        mu_inv = model->get_converter_commutation_overlap_angle_in_deg(converter);
        vdci = model->get_converter_dc_voltage_in_kV(converter);
        idci = model->get_converter_dc_current_in_kA(converter);


        os<<setprecision(3)<<time<<"\t"
          <<setprecision(6)<<volt_rec<<"\t"
          <<setprecision(6)<<volt_inv<<"\t"
          <<setprecision(6)<<p_rec<<"\t"
          <<setprecision(6)<<q_rec<<"\t"
          <<setprecision(6)<<alpha<<"\t"
          <<setprecision(6)<<mu_rec<<"\t"
          <<setprecision(6)<<p_inv<<"\t"
          <<setprecision(6)<<q_inv<<"\t"
          <<setprecision(6)<<gamma<<"\t"
          <<setprecision(6)<<mu_inv<<"\t"
          <<setprecision(6)<<vdcr<<"\t"
          <<setprecision(6)<<vdci<<"\t"
          <<setprecision(6)<<idcr<<"\t"
          <<setprecision(6)<<idci<<endl;
        cos<<os.str();
        os.clear();
    }

    double Vac_inv = db->get_bus_voltage_in_pu(2);
    double rate = 0.2;

    while(true)
    {
        time += delt;
        Vac_inv -= (rate*delt);

        if(time>3.0+FLOAT_EPSILON)
        {
            time -=delt;
            Vac_inv += (rate*delt);
            break;
        }

        converter = RECTIFIER;
        vdcr = model->get_converter_dc_voltage_in_kV(converter);
        while(true)
        {
            model->run(INTEGRATE_MODE);
            if(fabs(vdcr-model->get_converter_dc_voltage_in_kV(RECTIFIER))>1e-6)
                vdcr = model->get_converter_dc_voltage_in_kV(RECTIFIER);
            else
                break;
        }
        model->run(UPDATE_MODE);

        converter = RECTIFIER;
        p_rec = model->get_converter_ac_complex_power_in_MVA(converter).real();
        q_rec = model->get_converter_ac_complex_power_in_MVA(converter).imag();
        alpha = model->get_converter_alpha_or_gamma_in_deg(converter);
        mu_rec = model->get_converter_commutation_overlap_angle_in_deg(converter);
        vdcr = model->get_converter_dc_voltage_in_kV(converter);
        idcr = model->get_converter_dc_current_in_kA(converter);

        converter = INVERTER;
        p_inv = model->get_converter_ac_complex_power_in_MVA(converter).real();
        q_inv = model->get_converter_ac_complex_power_in_MVA(converter).imag();
        gamma = model->get_converter_alpha_or_gamma_in_deg(converter);
        mu_inv = model->get_converter_commutation_overlap_angle_in_deg(converter);
        vdci = model->get_converter_dc_voltage_in_kV(converter);
        idci = model->get_converter_dc_current_in_kA(converter);


        os<<setprecision(3)<<time<<"\t"
          <<setprecision(6)<<volt_rec<<"\t"
          <<setprecision(6)<<volt_inv<<"\t"
          <<setprecision(6)<<p_rec<<"\t"
          <<setprecision(6)<<q_rec<<"\t"
          <<setprecision(6)<<alpha<<"\t"
          <<setprecision(6)<<mu_rec<<"\t"
          <<setprecision(6)<<p_inv<<"\t"
          <<setprecision(6)<<q_inv<<"\t"
          <<setprecision(6)<<gamma<<"\t"
          <<setprecision(6)<<mu_inv<<"\t"
          <<setprecision(6)<<vdcr<<"\t"
          <<setprecision(6)<<vdci<<"\t"
          <<setprecision(6)<<idcr<<"\t"
          <<setprecision(6)<<idci<<endl;
        cos<<os.str();
        os.clear();
    }

    while(true)
    {
        time += delt;

        if(time>5.0+FLOAT_EPSILON)
        {
            time -=delt;
            break;
        }

        converter = RECTIFIER;
        vdcr = model->get_converter_dc_voltage_in_kV(converter);
        while(true)
        {
            model->run(INTEGRATE_MODE);
            if(fabs(vdcr-model->get_converter_dc_voltage_in_kV(RECTIFIER))>1e-6)
                vdcr = model->get_converter_dc_voltage_in_kV(RECTIFIER);
            else
                break;
        }
        model->run(UPDATE_MODE);

        converter = RECTIFIER;
        p_rec = model->get_converter_ac_complex_power_in_MVA(converter).real();
        q_rec = model->get_converter_ac_complex_power_in_MVA(converter).imag();
        alpha = model->get_converter_alpha_or_gamma_in_deg(converter);
        mu_rec = model->get_converter_commutation_overlap_angle_in_deg(converter);
        vdcr = model->get_converter_dc_voltage_in_kV(converter);
        idcr = model->get_converter_dc_current_in_kA(converter);

        converter = INVERTER;
        p_inv = model->get_converter_ac_complex_power_in_MVA(converter).real();
        q_inv = model->get_converter_ac_complex_power_in_MVA(converter).imag();
        gamma = model->get_converter_alpha_or_gamma_in_deg(converter);
        mu_inv = model->get_converter_commutation_overlap_angle_in_deg(converter);
        vdci = model->get_converter_dc_voltage_in_kV(converter);
        idci = model->get_converter_dc_current_in_kA(converter);


        os<<setprecision(3)<<time<<"\t"
          <<setprecision(6)<<volt_rec<<"\t"
          <<setprecision(6)<<volt_inv<<"\t"
          <<setprecision(6)<<p_rec<<"\t"
          <<setprecision(6)<<q_rec<<"\t"
          <<setprecision(6)<<alpha<<"\t"
          <<setprecision(6)<<mu_rec<<"\t"
          <<setprecision(6)<<p_inv<<"\t"
          <<setprecision(6)<<q_inv<<"\t"
          <<setprecision(6)<<gamma<<"\t"
          <<setprecision(6)<<mu_inv<<"\t"
          <<setprecision(6)<<vdcr<<"\t"
          <<setprecision(6)<<vdci<<"\t"
          <<setprecision(6)<<idcr<<"\t"
          <<setprecision(6)<<idci<<endl;
        cos<<os.str();
        os.clear();
    }

    while(true)
    {
        time += delt;
        Vac_inv += (rate*delt);

        if(time>7.0+FLOAT_EPSILON)
        {
            time -=delt;
            Vac_inv -= (rate*delt);
            break;
        }

        converter = RECTIFIER;
        vdcr = model->get_converter_dc_voltage_in_kV(converter);
        while(true)
        {
            model->run(INTEGRATE_MODE);
            if(fabs(vdcr-model->get_converter_dc_voltage_in_kV(RECTIFIER))>1e-6)
                vdcr = model->get_converter_dc_voltage_in_kV(RECTIFIER);
            else
                break;
        }
        model->run(UPDATE_MODE);

        converter = RECTIFIER;
        p_rec = model->get_converter_ac_complex_power_in_MVA(converter).real();
        q_rec = model->get_converter_ac_complex_power_in_MVA(converter).imag();
        alpha = model->get_converter_alpha_or_gamma_in_deg(converter);
        mu_rec = model->get_converter_commutation_overlap_angle_in_deg(converter);
        vdcr = model->get_converter_dc_voltage_in_kV(converter);
        idcr = model->get_converter_dc_current_in_kA(converter);

        converter = INVERTER;
        p_inv = model->get_converter_ac_complex_power_in_MVA(converter).real();
        q_inv = model->get_converter_ac_complex_power_in_MVA(converter).imag();
        gamma = model->get_converter_alpha_or_gamma_in_deg(converter);
        mu_inv = model->get_converter_commutation_overlap_angle_in_deg(converter);
        vdci = model->get_converter_dc_voltage_in_kV(converter);
        idci = model->get_converter_dc_current_in_kA(converter);


        os<<setprecision(3)<<time<<"\t"
          <<setprecision(6)<<volt_rec<<"\t"
          <<setprecision(6)<<volt_inv<<"\t"
          <<setprecision(6)<<p_rec<<"\t"
          <<setprecision(6)<<q_rec<<"\t"
          <<setprecision(6)<<alpha<<"\t"
          <<setprecision(6)<<mu_rec<<"\t"
          <<setprecision(6)<<p_inv<<"\t"
          <<setprecision(6)<<q_inv<<"\t"
          <<setprecision(6)<<gamma<<"\t"
          <<setprecision(6)<<mu_inv<<"\t"
          <<setprecision(6)<<vdcr<<"\t"
          <<setprecision(6)<<vdci<<"\t"
          <<setprecision(6)<<idcr<<"\t"
          <<setprecision(6)<<idci<<endl;
        cos<<os.str();
        os.clear();
    }
}

void HVDC_MODEL_TEST::test_get_auxiliary_signal()
{
    show_test_information_for_function_of_class(__FUNCTION__,"HVDC_MODEL_TEST");
}
